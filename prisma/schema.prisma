// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  manager
  user
}


model User {
  id                String   @id @default(uuid())
  name              String?
  passwordHash      String?
  email             String   @unique
  image             String?
  designation       String?
  description       String?
  role              UserRole @default(user)
  createdAt         DateTime @default(now())
  emailVerified     DateTime?
  recommendation    Json?
  skills            UserSkill[]
  accounts          Account[]
  sessions          Session[]
  skillWishlist     SkillWishlist[]
  roadmap           Roadmap[]
  userCompetencies  UserCompetency[]
  userGoals         UserGoal[]
  employeeNo        String?  @unique
  organizationInfo  OrganizationChart? @relation("UserToOrgChart", fields: [employeeNo], references: [employeeNo])
}

model SkillCategory {
  id    String   @id @default(uuid())
  name  String   @unique
  skills Skill[]
  userSkills UserSkill[]
  skillWishlist SkillWishlist[]
}

model Skill {
  id          String   @id @default(uuid())
  name        String
  categoryId  String
  category    SkillCategory @relation(fields: [categoryId], references: [id])
  userSkills  UserSkill[]

  @@unique([name, categoryId])
}

model UserSkill {
  id                 String   @id @default(uuid())
  userId             String
  skillId            String
  categoryId         String
  level              String   @default("Level 1")
  description        String?
  validatedByManager Boolean  @default(false)
  
  user       User          @relation(fields: [userId], references: [id])
  skill      Skill         @relation(fields: [skillId], references: [id])
  category   SkillCategory @relation(fields: [categoryId], references: [id])

  @@unique([userId, skillId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?    
  token_type        String? 
  scope             String? 
  id_token          String? 
  session_state     String? 
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SkillWishlist {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    
  skillName   String
  categoryId  String    
  description String?
  createdAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [id])
  category    SkillCategory @relation(fields: [categoryId], references: [id])
}

model Roadmap {
  id        String   @id @default(uuid())
  userId    String   // Store user ID (e.g., Auth0 or NextAuth)
  skillName String
  level     String
  roadmap   Json 
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId, skillName, level])
}

model Competency {
  id              String  @id @default(uuid()) 
  competencyType  String  
  competencyName  String  
  weightage       Int     
  description     String?  
  year            Int     @default(2024)
  createdAt       DateTime @default(now())

  userCompetencies UserCompetency[]
  
  @@unique([competencyType, competencyName, year]) // Ensuring unique competency types per year
}

model UserCompetency {
  id              String  @id @default(uuid())
  userId          String  
  competencyId    String  
  employeeRating  Int     @default(0) @db.SmallInt // 0-4 scale
  managerRating   Int     @default(0) @db.SmallInt 
  adminRating     Int     @default(0) @db.SmallInt

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  competency  Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)

  @@unique([userId, competencyId]) // Ensuring unique competency per user
}

model Goal {
  id           String  @id @default(uuid())
  goalCategory String
  goalName     String
  goalTitle    String
  metric       String
  weightage    Int
  year         Int     @default(2024)
  createdAt    DateTime @default(now())

  userGoals    UserGoal[]
}

model UserGoal {
  id           String  @id @default(uuid())
  userId       String
  goalId       String
  employeeRating  Int  @default(0) @db.SmallInt // 0-4 scale
  managerRating   Int  @default(0) @db.SmallInt
  adminRating     Int  @default(0) @db.SmallInt

  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal  Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@unique([userId, goalId]) // Ensuring unique goal per user
}

model OrganizationChart {
  id             String   @id @default(uuid())
  employeeNo     String   @unique
  employeeName   String
  managerNo      String?  // Display only
  managerName    String?  // Display only
  effectiveDate  DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User?    @relation("UserToOrgChart")
  manager        OrganizationChart? @relation("ManagerToEmployee", fields: [managerNo], references: [employeeNo])
  subordinates   OrganizationChart[] @relation("ManagerToEmployee")
}

model SystemStatus {
  key   String @id
  value String @db.Text
}